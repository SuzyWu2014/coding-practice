#2

a += [1]: amortized O(1)

#5 Complete the code to find the value in a BST t that is closest to a query x, and decide complexity.

def find(t, x, best=None):
    if t == []:
        return best

    left, root, right = t

    if best is None or abs(root - x) <  abs(best - x):
        best = root

    if x < root:
        return find(left, x, best)

    return find(right, x, best)

