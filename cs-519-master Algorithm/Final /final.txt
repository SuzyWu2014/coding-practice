CS 519 Final Review Questions

The Final is comprehensive, with a focus on the portion after Midterm.
Special focus on the connections among DP, priority queues, and shortest-path.

1. Give a real-life example of "changing" priorities,
   i.e., when do you need to call "decrease-key()" as in Dijkstra?

2. Describe how to implement decrease-key().

3. For the following graphs, decide whether they are
   (1) directed or undirected, and (2) dense or sparse:

   (a) Facebook
   (b) Twitter
   (c) family
   (d) airline map (V=airports, E=direct_flights)
   (e) mesh

4. Give two real-life examples of topological sort.

5. We covered BFS implementation of topological sort,
   and the topological order is used in bottom-up approaches in DP (Viterbi).
   How to use DFS for topological sort?
   How does it connect to the top-down approach in DP?

6. Can Dijkstra work for all DAGs? Give example(s).

7. What's the time complexity of Dijkstra if you use the following implementations of priority queue?
   (a) binary heap
   (b) unsorted array
   (c) sorted array
   (d) Fibonacci heap (not taught in class, but covered in CLRS)

8. Dijkstra with integer weights: suppose all edge weights are in {1..W}
   where W is a positive integer but not a const.
   Modify priority queue datastructure to achieve O(VW+E) time. (hint: no heap).

9. Weird shortest path: find the path whose longest edge is the shortest.
   motivation: My car has a small tank, and gas stations are only found in cities.
    	       To be safe, I don't wanna travel long distance between two cities.

   O(V+E)  (just modify Viterbi)
   O(VlogV + E) 	(modify Dijkstra => similar to Prim)

   How about the path whost shortest edge is the longest?

10. Draw the hypergraph for: (neglect the edges and just draw the hyperedges)

   (a) best() for ACGU.
       list at least three topological orders.

   (b) number of binary search trees of 3 nodes.
       how many topological orders can you get?

11. Fill-in-the-blanks question:
    Variant of one of the following:
    TSP (both versions), RNA best(), RNA total(),
    Viterbi (including topological sort), or Dijkstra.

12. Given a boolean expression, count the number of parenthesizations that return T.
   e.g.,

   input: F + F * T    output: 1. reason: (F+(F*T))
   input: T + F * T    output: 2. reason: (T+(F*T))   ((T+F)*T)

   O(n^3) or better.

13. Each integer can be represented as the sum of squares, e.g.:
   1 = 1*1	    (partition size 1)
   2 = 1*1 + 1*1    (partition size 2)
   4 = 2*2   	    (partition size 1)
   5 = 2*2 + 1*1    (partition size 2)

   For a given integer N, find the smallest partition (e.g., for N=4, return 1; for N=5, return 2).

   O(n^2) or better.
