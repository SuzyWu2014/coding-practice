
0. (a) Describe a greedy algorithm for LIS and show a counter example.
   (b) Describe an exhaustive algorithm for TSP and analyze complexity.


b) There are n! permutation for n cities. An exhaustive algorithm is to calculate all the distances for these n! routes and select the minimum route from them.

1. Q: What are the time and space complexities?
    Time complexity: O(n^2)
    => Let n be the length of the string,
       To calculate lis length for each letter in possition i, it takes O(i) time
       Therefore: T(n) = T(n - 1) + O(n) = O(n ^ 2)
    Space: O(n)
    => Use a 1-D array to store the lis for string ends at possition j. (j = 0 - n)

2. Write the subproblem definition, recurrence relation, and space/time complexities in report.txt.
    => subproblem definition: dp[city_k, subset]: the minimum distance from starting city 0 to city k via a set of intermediate cities; the subset includes city k.
    => recurrence relation: dp[city_k, subset] = min(dp[city_m, subset - {city_k}] + distance(city_m, city_k)) for m in subset - {city_k}

    => Let n be the number of cities, so there are 2^n number of subsets in total.
    => time complexity: It takes O(n) time to calculate dp[i, subset], and there are 2^n * n cells to fill up. In total, T(n) = O(2^n * n^2)
    => space complexity: O(2^n * n) for the dp table.

test cases: => refer to tsp.py.

0. What's your name?
Shujin Wu

1. Approximately how many hours did you spend on this assignment?

2. Would you rate it as easy, moderate, or difficult?
moderate

3. Did you work on it mostly alone, or mostly with other people?
mostly alone

4. How deeply do you feel you understand the material it covers (0%â€“100%)?
90%

5. Which part(s) of the course you like the most so far?
Solve problems.

6. Which part(s) of the course you dislike the most so far?
Describe a greedy algorithm that is wrong.

